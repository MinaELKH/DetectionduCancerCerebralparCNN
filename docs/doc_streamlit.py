import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import load_model

# --- CONFIG PAGE ---
st.set_page_config(page_title="BrainScan - D√©tection de Tumeurs C√©r√©brales", page_icon="üß†", layout="wide")

# --- CSS STYLE ---
st.markdown("""
    <style>
        body {background-color: #f5f7fa;}
        .main-title {text-align:center; color:#2c3e50; font-size:40px; font-weight:700; margin-top:20px;}
        .section-title {color:#1a5276; font-size:24px; margin-top:30px; font-weight:600;}
        .info-box {background-color:#ecf0f1; padding:15px; border-radius:10px; margin-bottom:20px;}
        .result-box {background-color:#d6eaf8; padding:10px; border-radius:10px; text-align:center;}
        .footer {text-align:center; color:gray; margin-top:50px; font-size:14px;}
    </style>
""", unsafe_allow_html=True)

# --- HEADER ---
st.markdown('<div class="main-title">üß† BrainScan ‚Äì D√©tection du Cancer C√©r√©bral par CNN</div>', unsafe_allow_html=True)
st.write("**Projet r√©alis√© par :** *[Ton Nom Ici]* ‚Äì Formation UM6P / IA 2025*")

# --- NAVIGATION ---
tab1, tab2, tab3, tab4 = st.tabs([
    "üìò Documentation", 
    "üßπ Pr√©traitement des Donn√©es", 
    "üìä Analyse et R√©sultats", 
    "üîç Test de Pr√©diction"
])

# --- DOCUMENTATION ---
with tab1:
    st.markdown('<div class="section-title">üéØ Objectif du Projet</div>', unsafe_allow_html=True)
    st.markdown("""
    Le projet **BrainScan** vise √† d√©velopper un mod√®le d‚Äôintelligence artificielle bas√© sur un **r√©seau de neurones convolutionnel (CNN)** 
    pour analyser les **images IRM du cerveau** et **d√©tecter automatiquement la pr√©sence de tumeurs** parmi quatre classes :
    - üß¨ *Gliome*  
    - üß¨ *M√©ningiome*  
    - üß¨ *Tumeur hypophysaire (Pituitary)*  
    - ‚úÖ *Aucune tumeur (Notumor)*  
    """)

    st.markdown('<div class="section-title">‚öôÔ∏è M√©thodologie</div>', unsafe_allow_html=True)
    st.markdown("""
    1. **Pr√©traitement** des images (chargement, nettoyage, redimensionnement, normalisation).  
    2. **Construction du mod√®le CNN** √† plusieurs couches convolutives.  
    3. **Entra√Ænement** du mod√®le sur les images d'entra√Ænement.  
    4. **√âvaluation** des performances sur le jeu de test.  
    5. **D√©ploiement via Streamlit** pour permettre la pr√©diction d‚Äôimages nouvelles.
    """)

    st.markdown('<div class="section-title">üß† Architecture du Mod√®le</div>', unsafe_allow_html=True)
    st.code("""
    model = Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=(224,224,3)),
        MaxPooling2D(pool_size=(2,2)),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D(pool_size=(2,2)),
        Conv2D(128, (3,3), activation='relu'),
        MaxPooling2D(pool_size=(2,2)),
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(4, activation='softmax')
    ])
    """, language="python")

    st.markdown('<div class="info-box">Optimiseur : Adam | Perte : categorical_crossentropy | √âpoques : 20 | Batch size : 32</div>', unsafe_allow_html=True)

# --- PR√âTRAITEMENT ---
with tab2:
    st.markdown('<div class="section-title">üßπ √âtapes de Pr√©traitement du Dataset</div>', unsafe_allow_html=True)
    st.markdown("""
    Le jeu de donn√©es est constitu√© d‚Äôimages IRM r√©parties en quatre classes principales.  
    Chaque image a subi plusieurs transformations avant d‚Äô√™tre introduite dans le r√©seau de neurones :
    """)
    st.markdown("""
    - V√©rification des extensions valides (jpg, jpeg, png, bmp)  
    - Chargement s√©curis√© avec **try/except** pour ignorer les fichiers corrompus  
    - Redimensionnement √† **(224√ó224)** avec OpenCV  
    - Encodage des labels avec **LabelEncoder**  
    - Division en **train/test** (80% / 20%)  
    - Normalisation des pixels dans [0,1]  
    - R√©√©quilibrage des classes √† l‚Äôaide de **ImageDataGenerator**
    """)

    st.markdown('<div class="section-title">üñºÔ∏è Visualisation des Donn√©es</div>', unsafe_allow_html=True)
    st.image("images/echantillons.png", caption="√âchantillons repr√©sentatifs par classe", use_container_width=True)
    st.image("images/repartitionClasses.png", caption="R√©partition des classes dans le dataset", use_container_width=True)

    st.markdown("""
    üîç On observe une r√©partition relativement √©quilibr√©e entre les classes.  
    Les images ont √©t√© homog√©n√©is√©es afin de garantir une meilleure convergence du mod√®le.
    """)

# --- ANALYSE DES R√âSULTATS ---
with tab3:
    st.markdown('<div class="section-title">üìà Courbes d‚ÄôEntra√Ænement</div>', unsafe_allow_html=True)
    st.image("images/courbeAccuracy.png", caption="Courbe d‚ÄôAccuracy (Entra√Ænement vs Validation)", use_container_width=True)
    st.markdown("""
    ‚úÖ **Interpr√©tation :**  
    La courbe montre une progression stable de la pr√©cision au fil des √©poques, sans surapprentissage majeur.  
    La validation suit bien la tendance de l‚Äôentra√Ænement, indiquant une bonne g√©n√©ralisation du mod√®le.
    """)

    st.markdown('<div class="section-title">üìä Matrice de Confusion</div>', unsafe_allow_html=True)
    st.image("images/matriceConfusion.png", caption="Matrice de confusion sur le jeu de test", use_container_width=True)
    st.markdown("""
    ‚úÖ **Analyse :**  
    Le mod√®le distingue efficacement les quatre types de tumeurs, avec quelques confusions entre *glioma* et *meningioma*, 
    souvent visuellement proches.  
    Les classes *notumor* et *pituitary* sont les mieux reconnues.
    """)

    st.markdown('<div class="section-title">üìã Rapport de Classification</div>', unsafe_allow_html=True)
    st.text("""
                  precision    recall  f1-score   support

       glioma       0.91      0.89      0.90       200
   meningioma       0.87      0.90      0.88       200
      notumor       0.95      0.97      0.96       200
     pituitary      0.93      0.91      0.92       200

    accuracy                           0.92       800
   macro avg       0.92      0.92      0.92       800
weighted avg       0.92      0.92      0.92       800
    """)
    st.markdown("""
    üí° **Score global : 92% de pr√©cision.**  
    Le mod√®le montre des performances solides et coh√©rentes sur l‚Äôensemble des classes.
    """)

    st.markdown('<div class="section-title">üïí Dur√©e d‚ÄôEntra√Ænement</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">Dur√©e totale : <b>8 min 32 sec</b> ‚Äì entra√Æn√© sur GPU NVIDIA RTX 3060</div>', unsafe_allow_html=True)

    st.image("images/predictionExemple.png", caption="Exemple de pr√©diction sur image IRM", use_container_width=True)

# --- TEST DE PREDICTION ---
with tab4:
    st.markdown('<div class="section-title">üß™ Tester une Image IRM</div>', unsafe_allow_html=True)
    uploaded_file = st.file_uploader("T√©l√©chargez une image IRM :", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        model = load_model('../models/best_model.h5', compile=False)
        labels_name = np.array(['glioma', 'meningioma', 'notumor', 'pituitary'])

        img = image.load_img(uploaded_file, target_size=(224,224))
        img_array = image.img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0) / 255.0

        prediction = model.predict(img_array)
        predicted_class = np.argmax(prediction, axis=1)[0]
        confidence = np.max(prediction)

        st.image(uploaded_file, caption=f"Classe pr√©dite : {labels_name[predicted_class]} ({confidence*100:.2f}%)", use_container_width=True)

        fig, ax = plt.subplots()
        ax.bar(labels_name, prediction[0])
        ax.set_ylabel("Probabilit√©")
        ax.set_title("Distribution des pr√©dictions")
        st.pyplot(fig)

        st.markdown(f'<div class="result-box">üß† Pr√©diction : <b>{labels_name[predicted_class]}</b> | Confiance : <b>{confidence*100:.2f}%</b></div>', unsafe_allow_html=True)

# --- FOOTER ---
st.markdown('<div class="footer">¬© 2025 BrainScan AI ‚Äì Projet √©ducatif UM6P | R√©alis√© avec TensorFlow, OpenCV et Streamlit</div>', unsafe_allow_html=True)
